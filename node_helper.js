'use strict';

var NodeHelper = require('node_helper');
var gpiox = require('@iiot2k/gpiox');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var NodeHelper__namespace = /*#__PURE__*/_interopNamespaceDefault(NodeHelper);

class Button {
    constructor(pin) {
        this.eventList = {};
        this.state = {
            active: false,
            lastChange: 0
        };
        this.PIN = pin;
        this._registerListener();
    }
    cleanup() {
        gpiox.deinit_gpio(this.PIN);
    }
    _appendEvent(eventType, callback) {
        this.eventList[eventType] = this.eventList[eventType] || [];
        this.eventList[eventType].push(callback);
    }
    _triggerEvent(eventType) {
        if (!this.eventList[eventType] || this.eventList[eventType].length === 0)
            return;
        this.eventList[eventType].forEach((eventCallback) => {
            eventCallback();
        });
    }
    _registerListener() {
        gpiox.watch_gpio(this.PIN, gpiox.GPIO_MODE_INPUT_PULLUP, 0, gpiox.GPIO_EDGE_BOTH, (btnState) => {
            const now = Date.now();
            if (!btnState) {
                this._triggerEvent("press");
                if (now - this.state.lastChange > 600)
                    this._triggerEvent("longPress");
                else
                    this._triggerEvent("shortPress");
            }
            this.state = {
                active: Boolean(btnState),
                lastChange: now
            };
        });
    }
    onPress(callback) {
        this._appendEvent("press", callback);
    }
    onShortPress(callback) {
        this._appendEvent("shortPress", callback);
    }
    onLongPress(callback) {
        this._appendEvent("longPress", callback);
    }
}

class Rotary {
    constructor({ SW, CLK, DT }) {
        this.eventList = {};
        this.pins = {
            SW,
            CLK,
            DT
        };
        gpiox.init_gpio(DT, 0, 100);
        this.button = new Button(SW);
        this._registerListener();
    }
    cleanup() {
        gpiox.deinit_gpio(this.pins.CLK);
        gpiox.deinit_gpio(this.pins.DT);
        this.button.cleanup();
    }
    _appendEvent(eventType, callback) {
        this.eventList[eventType] = this.eventList[eventType] || [];
        this.eventList[eventType].push(callback);
    }
    _triggerEvent(eventType, event) {
        if (!this.eventList[eventType] || this.eventList[eventType].length === 0)
            return;
        this.eventList[eventType].forEach((eventCallback) => {
            eventCallback(event);
        });
    }
    _registerListener() {
        gpiox.watch_gpio(this.pins.CLK, gpiox.GPIO_MODE_INPUT_PULLUP, 400, gpiox.GPIO_EDGE_BOTH, (state) => {
            if (state === 1) {
                const dtValue = gpiox.get_gpio(this.pins.DT);
                const direction = dtValue ? "left" : "right";
                this._triggerEvent("turn", { direction });
                this._triggerEvent(direction === "left" ? "turnLeft" : "turnRight");
            }
        });
        this.button.onPress(() => {
            this._triggerEvent("press");
        });
        this.button.onShortPress(() => {
            this._triggerEvent("shortPress");
        });
        this.button.onLongPress(() => {
            this._triggerEvent("longPress");
        });
    }
    onTurn(callback) {
        this._appendEvent("turn", callback);
    }
    onTurnLeft(callback) {
        this._appendEvent("turnLeft", callback);
    }
    onTurnRight(callback) {
        this._appendEvent("turnRight", callback);
    }
    onPress(callback) {
        this._appendEvent("press", callback);
    }
    onShortPress(callback) {
        this._appendEvent("shortPress", callback);
    }
    onLongPress(callback) {
        this._appendEvent("longPress", callback);
    }
}

class RotaryNodeHelper {
    constructor(nodeHelper, rotaryPins) {
        this.rotary = null;
        this.nodeHelper = nodeHelper;
        this.rotaryPins = rotaryPins;
    }
    socketNotificationReceived(notification) {
        if (notification === "ROTARY_INIT")
            this._init();
    }
    _init() {
        if (this.rotary)
            return;
        this.rotary = new Rotary(this.rotaryPins);
        this.rotary.onTurnLeft(() => {
            this.nodeHelper.sendSocketNotification("ROTARY_PREV", null);
        });
        this.rotary.onTurnRight(() => {
            this.nodeHelper.sendSocketNotification("ROTARY_NEXT", null);
        });
        this.rotary.onPress(() => {
            this.nodeHelper.sendSocketNotification("ROTARY_PRESS", null);
        });
        this.rotary.onShortPress(() => {
            this.nodeHelper.sendSocketNotification("ROTARY_SHORT_PRESS", null);
        });
        this.rotary.onLongPress(() => {
            this.nodeHelper.sendSocketNotification("ROTARY_LONG_PRESS", null);
        });
    }
}

var Helper = NodeHelper__namespace.create({
    rotaryHelper: RotaryNodeHelper,
    start() {
        console.log("NodeHelper started Rotary Started");
        this.rotaryHelper = new RotaryNodeHelper(this, {
            SW: 27,
            CLK: 17,
            DT: 18
        });
    },
    async socketNotificationReceived(notification, payload) {
        console.log("Rotary start notification recived", notification);
        this.rotaryHelper.socketNotificationReceived(notification);
    }
});

module.exports = Helper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
